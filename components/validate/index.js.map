{"version":3,"sources":["components/validate/index.tsx"],"names":[],"mappings":"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","file":"../../assets/components/validate/index.js","sourcesContent":["import * as React from 'react';\r\nimport Input from '../input/index';\r\nimport { addRule, getLength, messages, regExpArray, ruleDefault, ruleArray, replaceArray, RuleFunction, replaceDefault } from './rule';\r\nimport Popover from '../popover/index';\r\nimport { InputProps } from 'antd/lib/input/Input';\r\n\r\n/**\r\n * 验证组件 属性\r\n * \r\n * @interface IValidateProps\r\n * @extends {InputProps}\r\n */\r\ninterface IValidateProps {\r\n    /**\r\n     * 必填\r\n     * \r\n     * @type {boolean}\r\n     * @memberOf IValidateProps\r\n     */\r\n    required?: boolean\r\n    /**\r\n     * 数值最小值\r\n     * \r\n     * @type {number}\r\n     * @memberOf IValidateProps\r\n     */\r\n    min?: number\r\n    /**\r\n     * 数值最大值\r\n     * \r\n     * @type {number}\r\n     * @memberOf IValidateProps\r\n     */\r\n    max?: number\r\n    /**\r\n     * 字符串长度最小值\r\n     * \r\n     * @type {number}\r\n     * @memberOf IValidateProps\r\n     */\r\n    minLength?: number\r\n    /**\r\n     * 字符串长度最大值\r\n     * \r\n     * @type {number}\r\n     * @memberOf IValidateProps\r\n     */\r\n    maxLength?: number\r\n    /**\r\n     * 是否开启符号输入\r\n     * \r\n     * @type {number}\r\n     * @memberOf IValidateProps\r\n     */\r\n    noSymbol?: boolean\r\n\r\n    /**\r\n    * 电话\r\n    * \r\n    * @type {boolean}\r\n    * @memberOf IValidateProps\r\n    */\r\n    telephone?: boolean\r\n\r\n    placeholder?: string\r\n    value?: string\r\n\r\n    /**\r\n   * 自定义规则\r\n   * \r\n   * @type {boolean}\r\n   * @memberOf IValidateState\r\n   */\r\n    [key: string]: any\r\n};\r\n/**\r\n * 状态\r\n * \r\n * @interface IValidateState\r\n */\r\ninterface IValidateState {\r\n    /**\r\n     * 验证信息\r\n     * \r\n     * @type {string[]}\r\n     * @memberOf IValidateState\r\n     */\r\n    msg: string[],\r\n    /**\r\n     * 验证结果\r\n     * \r\n     * @type {boolean}\r\n     * @memberOf IValidateState\r\n     */\r\n    validate: boolean\r\n\r\n\r\n};\r\n/**\r\n * 验证类\r\n * \r\n * @class Validate\r\n * @extends {React.Component<IValidateProps, IValidateState>}\r\n */\r\nclass Validate extends React.Component<IValidateProps, IValidateState> {\r\n\r\n    /**\r\n     * 状态\r\n     *\r\n     * @memberOf Validate\r\n     */\r\n    state = {\r\n        msg: [],\r\n        validate: true,\r\n        value: this.props.value\r\n    }\r\n\r\n    /**\r\n     * 验证事件\r\n     * \r\n     * @private\r\n     * @param {any} e\r\n     * @returns\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    private validate(e) {\r\n        let value = e.target.value;\r\n        let state = this.state;\r\n        state.msg = [];\r\n        state.validate = true;\r\n        //去除前后空格\r\n        state.value = replaceDefault(value);\r\n\r\n        if (this.props.required) {\r\n            let validate = this.valueValidateSave('required', value);\r\n            this.setState(this.state);\r\n            this.hiddenPopover();\r\n            if (!validate) { return; }\r\n        } else {\r\n            let validate = this.valueValidate('required', value);\r\n            if (!validate) { return; }\r\n        }\r\n\r\n        for (let key in this.props) {\r\n            if (messages.hasOwnProperty(key)) {\r\n                state.value = this.valueReplace(key, value);\r\n                let validate = this.valueValidateSave(key, value);\r\n            }\r\n        }\r\n\r\n        this.setState(this.state);\r\n        this.hiddenPopover();\r\n    }\r\n\r\n    private hiddenST\r\n    /**\r\n     * 定时隐藏提示框\r\n     * \r\n     * @private\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    private hiddenPopover() {\r\n        clearTimeout(this.hiddenST);\r\n        this.hiddenST = setTimeout(() => {\r\n            this.state.validate = true;\r\n            this.setState(this.state);\r\n        }, 4500);\r\n    }\r\n\r\n\r\n    /**\r\n     * 输入值 替换\r\n     * \r\n     * @private\r\n     * @param {any} key\r\n     * @param {any} value\r\n     * @returns\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    private valueReplace(key, value) {\r\n        let replaceFunction = replaceArray[key];\r\n        if (replaceFunction) {\r\n            return replaceFunction(value);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 验证信息渲染\r\n     * \r\n     * @returns\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    private msgRender() {\r\n        return <div>{\r\n            this.state.msg.map((value, index) => <p key={index}>{value}</p>)\r\n        }</div>;\r\n    }\r\n\r\n    /**\r\n     * 验证\r\n     * \r\n     * @param {string} type 验证类型\r\n     * @param {string} value 验证值\r\n     * @returns\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    private valueValidate(type: string, value: string) {\r\n        let state = this.state,\r\n            parameter = this.props[type],\r\n            rule = ruleArray[type] || ruleDefault(type),\r\n            validate = rule(value, parameter);\r\n        return validate;\r\n    }\r\n\r\n    /**\r\n     * 验证 --> 保存验证\r\n     * \r\n     * @param {string} type\r\n     * @param {string} value\r\n     * @returns\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    valueValidateSave(type: string, value: string) {\r\n        let state = this.state,\r\n            msg = messages[type],\r\n            parameter = this.props[type],\r\n            validate = this.valueValidate(type, value);\r\n        state.validate = state.validate && validate;\r\n        validate || state.msg.push(msg(value, parameter));\r\n        return validate;\r\n    }\r\n\r\n    private onChange(e) {\r\n        this.state.value = e.target.value;\r\n        this.setState(this.state);\r\n    }\r\n    /**\r\n     * 渲染\r\n     * \r\n     * @returns {JSX.Element}\r\n     * \r\n     * @memberOf Validate\r\n     */\r\n    public render(): JSX.Element {\r\n        let {props} = this;\r\n        return (<Popover overlayClassName='ant-popover-warning' placement=\"topLeft\" content={this.msgRender()} visible={!this.state.validate}>\r\n            {\r\n                <Input value={this.state.value}\r\n                    onChange={this.onChange.bind(this)}\r\n                    onBlur={this.validate.bind(this)} />\r\n            }\r\n        </Popover >);\r\n    }\r\n}\r\n\r\n\r\nexport { addRule, getLength };\r\nexport default Validate;\r\n\r\n\r\n\r\n"]}