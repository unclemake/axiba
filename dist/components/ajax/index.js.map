{"version":3,"sources":["components/ajax/index.js","components/ajax/index.ts"],"names":["get","url","data","type","exports","ajax","post","put","del","__awaiter","thisArg","_arguments","P","generator","Promise","reject","step","resolve","value","e","fulfilled","throw","result","done","then","rejected","next","superagent","require","index_1","config_1","ajaxRecordArray","stTime","typeFunctionArray","ajaxType","ajaxRecord","ajaxRecordGet","find","time","getTime","filter","reslove","responseDate","response","on","clearTimeout","setTimeout","arguments","length","undefined","regeneratorRuntime","mark","_callee","ajaxRequest","typeFunctionValue","promiseFunction","wrap","_context","prev","indexOf","requestUrl","Date","t0","delete","abrupt","send","unshift","sent","end","error","res","message","description","JSON","parse","text","status","stop","this"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments)).next());\n    });\n};\nconst superagent = require('superagent');\nconst index_1 = require('../notification/index');\nconst config_1 = require('../global/config');\n/**\n * get 请求\n *\n * @export\n * @param {string} url\n * @param {{ [key: string]: any }} [data]\n * @param {number} [type]\n * @returns\n */\nfunction get(url, data, type) {\n    return exports.ajax(url, data, type, 'get');\n}\nexports.get = get;\n/**\n * post 请求\n *\n * @export\n * @param {string} url\n * @param {{ [key: string]: any }} [data]\n * @param {number} [type]\n * @returns\n */\nfunction post(url, data, type) {\n    return exports.ajax(url, data, type, 'post');\n}\nexports.post = post;\n/**\n * put 请求\n *\n * @export\n * @param {string} url\n * @param {{ [key: string]: any }} [data]\n * @param {number} [type]\n * @returns\n */\nfunction put(url, data, type) {\n    return exports.ajax(url, data, type, 'put');\n}\nexports.put = put;\n/**\n * del 请求\n *\n * @export\n * @param {string} url\n * @param {{ [key: string]: any }} [data]\n * @param {number} [type]\n * @returns\n */\nfunction del(url, data, type) {\n    return exports.ajax(url, data, type, 'delete');\n}\nexports.del = del;\n/**\n * ajax 记录\n */\nlet ajaxRecordArray = [];\n/**\n *  ajaxType3 延迟时间\n */\nlet stTime = 400;\n/**\n * ajaxType 函数集合\n * 0. 同url同参数同类型 上一个完成时过 400ms 才能请求下一个\n * 1. 缓存请求返回值\n * 2. 延迟提交 400ms 同一时间400ms内的相同请求 只会请求最后一个请求\n */\nlet typeFunctionArray = [\n    // 同url同参数同类型 上一个完成时过 400ms 才能请求下一个\n        (url, data, type, ajaxType, ajaxRecord) => {\n        let ajaxRecordGet = ajaxRecordArray.find(value => {\n            return value != ajaxRecord &&\n                value.url === url &&\n                value.data === data &&\n                value.ajaxType === ajaxType &&\n                ajaxRecord.time.getTime() - value.time.getTime() < 400;\n        });\n        if (ajaxRecordGet) {\n            ajaxRecordArray = ajaxRecordArray.filter(value => value != ajaxRecord);\n            //不返回\n            return new Promise(() => { });\n        }\n    },\n    //缓存请求返回值\n        (url, data, type, ajaxType, ajaxRecord) => {\n        return new Promise((reslove, reject) => {\n            /**\n             *\n             *\n             * @param {any} value\n             * @returns\n             */\n            var ajaxRecordGet = ajaxRecordArray.find(value => {\n                return value != ajaxRecord &&\n                    value.url === url &&\n                    value.data === data &&\n                    value.ajaxType === ajaxType;\n            });\n            if (ajaxRecordGet) {\n                ajaxRecordArray = ajaxRecordArray.filter(value => value != ajaxRecord);\n                if (ajaxRecordGet.responseDate) {\n                    return reslove(ajaxRecordGet.responseDate);\n                }\n                else {\n                    ajaxRecordGet.response.on('end', () => {\n                        reslove(ajaxRecordGet.responseDate);\n                    });\n                }\n            }\n            reslove();\n        });\n    },\n    //延迟提交 400ms 同一时间400ms内的相同请求 只会请求最后一个请求\n        (url, data, type, ajaxType, ajaxRecord) => {\n        return new Promise((reslove, reject) => {\n            let ajaxRecordGet = ajaxRecordArray.find(value => {\n                return value != ajaxRecord &&\n                    value.url === url &&\n                    value.data === data &&\n                    value.ajaxType === ajaxType &&\n                    ajaxRecord.time.getTime() - value.time.getTime() < 400;\n            });\n            if (ajaxRecordGet) {\n                clearTimeout(ajaxRecordGet.setTimeout);\n            }\n            ajaxRecord.setTimeout = setTimeout(function () {\n                reslove();\n            }, stTime);\n        });\n    }\n];\nexports.ajax = (url, data, type = 0, ajaxType = 'get') => __awaiter(this, void 0, void 0, function* () {\n    //统一添加请求路径\n    if (url.indexOf('http') != 0) {\n        url = config_1.ajax.requestUrl + url;\n    }\n    let ajaxRequest;\n    let ajaxRecord = {\n        url,\n        time: new Date(),\n        data,\n        type,\n        ajaxType\n    };\n    //创建请求\n    switch (ajaxType) {\n        case 'delete':\n            ajaxRequest = superagent.delete(url);\n            break;\n        case 'put':\n            ajaxRequest = superagent.put(url);\n            break;\n        case 'get':\n            ajaxRequest = superagent.get(url);\n            break;\n        case 'post':\n            ajaxRequest = superagent.post(url);\n            break;\n    }\n    //创建请求数据\n    if (data) {\n        ajaxRequest = ajaxRequest.send(data);\n    }\n    //添加请求记录 反向添加\n    ajaxRecordArray.unshift(ajaxRecord);\n    let typeFunctionValue = yield typeFunctionArray[type](url, data, type, ajaxType, ajaxRecord);\n    if (typeFunctionValue) {\n        return typeFunctionValue;\n    }\n    let promiseFunction = (reslove, reject) => {\n        //发送请求\n        ajaxRequest.end((error, res) => {\n            ajaxRecord.response = res;\n            if (error) {\n                index_1.error({\n                    message: `请求错误!`,\n                    description: 'status:${res.status}'\n                });\n                reject(ajaxRecord.responseDate);\n            }\n            else {\n                try {\n                    ajaxRecord.responseDate = JSON.parse(res.text);\n                }\n                catch (error) {\n                    ajaxRecord.responseDate = {\n                        status: 0,\n                        data: res.text,\n                        message: ''\n                    };\n                }\n                reslove(ajaxRecord.responseDate);\n            }\n        });\n    };\n    return new Promise(promiseFunction);\n});",null],"sourceRoot":"/assets"}