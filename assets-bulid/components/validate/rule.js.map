{"version":3,"sources":["components/validate/rule.js","components/validate/rule.tsx"],"names":["exports","messages","required","number","value","parameter","min","max","minLength","maxLength","noSymbol","telephone","regExpArray","ruleArray","parseInt","getLength","replaceArray","replace","addRule","ruleObj","key","regExp","rule","replaceDefault","ruleDefault","test","length"],"mappings":";AAAA;;ACAWA,QAAAC,QAAA,GAAW;AAClBC,cAAU;AAAA,eAAM,KAAN;AAAA,KADQ;AAElBC,YAAQ,gBAACC,KAAD,EAAQC,SAAR;AAAA;AAAA,KAFU;AAGlBC,SAAK,aAACF,KAAD,EAAQC,SAAR;AAAA,yDAAgCA,SAAhC;AAAA,KAHa;AAIlBE,SAAK,aAACH,KAAD,EAAQC,SAAR;AAAA,yDAAgCA,SAAhC;AAAA,KAJa;AAKlBG,eAAW,mBAACJ,KAAD,EAAQC,SAAR;AAAA,qEAAkCA,SAAlC;AAAA,KALO;AAMlBI,eAAW,mBAACL,KAAD,EAAQC,SAAR;AAAA,qEAAkCA,SAAlC;AAAA,KANO;AAOlBK,cAAU,kBAACN,KAAD,EAAQC,SAAR;AAAA;AAAA,KAPQ;AAQlBM,eAAW,mBAACP,KAAD,EAAQC,SAAR;AAAA;AAAA;AARO,CAAX;AAWX;;;AAGWL,QAAAY,WAAA,GAAc;AACrB,QAAIV,QAAJ,GAAY;AAAK,eAAO;AAAP;AAAkB,KADd;AAErB,QAAIC,MAAJ,GAAU;AAAK,eAAO;AAAP;AAAuB,KAFjB;AAGrB,QAAIO,QAAJ,GAAY;AAAK,eAAO;AAAP;AAAwC,KAHpC;AAIrB,QAAIC,SAAJ,GAAa;AAAK,eAAO;AAAP;AAA4B;AAJzB,CAAd;AAYV;AACUX,QAAAa,SAAA,GAA6C;AACpDP,SAAK,aAACF,KAAD,EAAgBC,SAAhB;AAAA,eAA8BS,SAASV,KAAT,KAAmBC,SAAjD;AAAA,KAD+C;AAEpDE,SAAK,aAACH,KAAD,EAAgBC,SAAhB;AAAA,eAA8BS,SAASV,KAAT,KAAmBC,SAAjD;AAAA,KAF+C;AAGpDG,eAAW,mBAACJ,KAAD,EAAgBC,SAAhB;AAAA,eAA8BU,UAAUX,KAAV,KAAoBC,SAAlD;AAAA,KAHyC;AAIpDI,eAAW,mBAACL,KAAD,EAAgBC,SAAhB;AAAA,eAA8BU,UAAUX,KAAV,KAAoBC,SAAlD;AAAA;AAJyC,CAA7C;AASX;;;AAGWL,QAAAgB,YAAA,GAAe;AACtBb,YAAQ,gBAACC,KAAD,EAAc;AAClB,eAAOA,MAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,CAAP;AACH,KAHqB;AAItBX,SAAK,aAACF,KAAD,EAAc;AACf,eAAOA,MAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,CAAP;AACH,KANqB;AAOtBV,SAAK,aAACH,KAAD,EAAc;AACf,eAAOA,MAAMa,OAAN,CAAc,SAAd,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,EAA7C,CAAP;AACH;AATqB,CAAf;AA6BX;;;;;AAKA,SAAAC,OAAA,CAAwBC,OAAxB,EAAwC;AACpCnB,YAAAC,QAAA,CAASkB,QAAQC,GAAjB,IAAwBD,QAAQlB,QAAhC;AAEAkB,YAAQE,MAAR,KAAmBrB,QAAAY,WAAA,CAAYO,QAAQC,GAApB,IAA2BD,QAAQG,IAAtD;AACAH,YAAQG,IAAR,KAAiBtB,QAAAa,SAAA,CAAUM,QAAQC,GAAlB,IAAyBD,QAAQG,IAAlD;AACAH,YAAQF,OAAR,KAAoBjB,QAAAgB,YAAA,CAAaG,QAAQC,GAArB,IAA4BD,QAAQF,OAAxD;AACH;AANejB,QAAAkB,OAAA,GAAOA,OAAP;AAQhB;;;;;;AAMA,SAAAK,cAAA,CAA+BnB,KAA/B,EAA4C;AACxC,WAAOA,MAAMa,OAAN,CAAc,gBAAd,EAAgC,EAAhC,CAAP;AACH;AAFejB,QAAAuB,cAAA,GAAcA,cAAd;AAKhB;;;;;;AAMA,SAAAC,WAAA,CAA4BJ,GAA5B,EAAuC;AACnC,WAAO,UAAChB,KAAD,EAAM;AACT,eAAOJ,QAAAY,WAAA,CAAYQ,GAAZ,EAAiBK,IAAjB,CAAsBrB,KAAtB,CAAP;AACH,KAFD;AAGH;AAJeJ,QAAAwB,WAAA,GAAWA,WAAX;AAOhB;;;;;;;AAOA,SAAAT,SAAA,CAA0BX,KAA1B,EAAuC;AACnC,WAAOA,MAAMa,OAAN,CAAc,eAAd,EAA+B,IAA/B,EAAqCS,MAArC,GAA8C,CAArD;AACH;AAFe1B,QAAAe,SAAA,GAASA,SAAT","file":"components/validate/rule.js","sourcesContent":["\"use strict\";\nexports.messages = {\n    required: () => \"必填！\",\n    number: (value, parameter) => `请输入正整数！`,\n    min: (value, parameter) => `必须大于等于 ${parameter}`,\n    max: (value, parameter) => `必须小于等于 ${parameter}`,\n    minLength: (value, parameter) => `长度必须大于等于 ${parameter} (两个英文等于1)`,\n    maxLength: (value, parameter) => `长度必须大于等于 ${parameter} (两个英文等于1)`,\n    noSymbol: (value, parameter) => `必须是中文或英文,数字`,\n    telephone: (value, parameter) => `必须是手机号码`,\n};\n/**\n * 正则集合\n */\nexports.regExpArray = {\n    get required() { return /[^\\s]/g; },\n    get number() { return /^[0-9]\\d*$/g; },\n    get noSymbol() { return /^[\\u4E00-\\u9FA50-9a-zA-Z]+$/g; },\n    get telephone() { return /^1[34578]\\d{9}$/g; }\n};\n;\nexports.ruleArray = {\n    min: (value, parameter) => parseInt(value) >= parameter,\n    max: (value, parameter) => parseInt(value) <= parameter,\n    minLength: (value, parameter) => getLength(value) >= parameter,\n    maxLength: (value, parameter) => getLength(value) <= parameter,\n};\n/**\n * 替换规则集合\n */\nexports.replaceArray = {\n    number: (value) => {\n        return value.replace(/[^0-9]/g, \"\").replace(/^0+/g, \"\");\n    },\n    min: (value) => {\n        return value.replace(/[^0-9]/g, \"\").replace(/^0+/g, \"\");\n    },\n    max: (value) => {\n        return value.replace(/[^0-9]/g, \"\").replace(/^0+/g, \"\");\n    }\n};\n/**\n * 添加验证规则\n *\n * @param {RuleObj} ruleObj\n */\nfunction addRule(ruleObj) {\n    exports.messages[ruleObj.key] = ruleObj.messages;\n    ruleObj.regExp && (exports.regExpArray[ruleObj.key] = ruleObj.rule);\n    ruleObj.rule && (exports.ruleArray[ruleObj.key] = ruleObj.rule);\n    ruleObj.replace && (exports.replaceArray[ruleObj.key] = ruleObj.replace);\n}\nexports.addRule = addRule;\n/**\n * 默认验证规则 去除前后空格\n *\n * @param {string} key\n * @returns {RuleFunction}\n */\nfunction replaceDefault(value) {\n    return value.replace(/(^\\s*)|(\\s*$)/g, \"\");\n}\nexports.replaceDefault = replaceDefault;\n/**\n * 默认验证规则\n *\n * @param {string} key\n * @returns {RuleFunction}\n */\nfunction ruleDefault(key) {\n    return (value) => {\n        return exports.regExpArray[key].test(value);\n    };\n}\nexports.ruleDefault = ruleDefault;\n/**\n * 获取字符串长度 中文 = 1 英文 = 0.5\n *\n * @export\n * @param {string} value\n * @returns {number}\n */\nfunction getLength(value) {\n    return value.replace(/[^\\x00-\\xff]/g, \"01\").length / 2;\n}\nexports.getLength = getLength;",null],"sourceRoot":"/assets"}