{"version":3,"sources":["components/validate/rule.js","components/validate/rule.tsx"],"names":["addRule","ruleObj","exports","messages","key","regExp","regExpArray","rule","ruleArray","replace","replaceArray","replaceDefault","value","ruleDefault","test","getLength","length","required","number","parameter","min","max","minLength","maxLength","noSymbol","telephone","parseInt"],"mappings":";AAAA,YCyEA,SAAAA,SAAwBC,GACpBC,QAAAC,SAASF,EAAQG,KAAOH,EAAQE,SAEhCF,EAAQI,SAAWH,QAAAI,YAAYL,EAAQG,KAAOH,EAAQM,MACtDN,EAAQM,OAASL,QAAAM,UAAUP,EAAQG,KAAOH,EAAQM,MAClDN,EAAQQ,UAAYP,QAAAQ,aAAaT,EAAQG,KAAOH,EAAQQ,SAS5D,QAAAE,gBAA+BC,GAC3B,MAAOA,GAAMH,QAAQ,iBAAkB,IAU3C,QAAAI,aAA4BT,GACxB,MAAO,UAACQ,GACJ,MAAOV,SAAAI,YAAYF,GAAKU,KAAKF,IAYrC,QAAAG,WAA0BH,GACtB,MAAOA,GAAMH,QAAQ,gBAAiB,MAAMO,OAAS,EAjH9Cd,QAAAC,UACPc,SAAU,WAAA,MAAM,OAChBC,OAAQ,SAACN,EAAOO,GAAR,MAAA,WACRC,IAAK,SAACR,EAAOO,GAAR,MAAA,UAAgCA,GACrCE,IAAK,SAACT,EAAOO,GAAR,MAAA,UAAgCA,GACrCG,UAAW,SAACV,EAAOO,GAAR,MAAA,YAAkCA,EAAlC,cACXI,UAAW,SAACX,EAAOO,GAAR,MAAA,YAAkCA,EAAlC,cACXK,SAAU,SAACZ,EAAOO,GAAR,MAAA,eACVM,UAAW,SAACb,EAAOO,GAAR,MAAA,YAMJjB,QAAAI,aACPW,GAAIA,YAAa,MAAO,UACxBC,GAAIA,UAAW,MAAO,eACtBM,GAAIA,YAAa,MAAO,gCACxBC,GAAIA,aAAc,MAAO,qBASlBvB,QAAAM,WACPY,IAAK,SAACR,EAAeO,GAAhB,MAA8BO,UAASd,IAAUO,GACtDE,IAAK,SAACT,EAAeO,GAAhB,MAA8BO,UAASd,IAAUO,GACtDG,UAAW,SAACV,EAAeO,GAAhB,MAA8BJ,WAAUH,IAAUO,GAC7DI,UAAW,SAACX,EAAeO,GAAhB,MAA8BJ,WAAUH,IAAUO,IAQtDjB,QAAAQ,cACPQ,OAAQ,SAACN,GACL,MAAOA,GAAMH,QAAQ,UAAW,IAAIA,QAAQ,OAAQ,KAExDW,IAAK,SAACR,GACF,MAAOA,GAAMH,QAAQ,UAAW,IAAIA,QAAQ,OAAQ,KAExDY,IAAK,SAACT,GACF,MAAOA,GAAMH,QAAQ,UAAW,IAAIA,QAAQ,OAAQ,MA0B5CP,QAAAF,QAAOA,QAcPE,QAAAS,eAAcA,eAWdT,QAAAW,YAAWA,YAcXX,QAAAa,UAASA","file":"components/validate/rule-749b911902.js","sourcesContent":["\"use strict\";\nexports.messages = {\n    required: () => \"必填！\",\n    number: (value, parameter) => `请输入正整数！`,\n    min: (value, parameter) => `必须大于等于 ${parameter}`,\n    max: (value, parameter) => `必须小于等于 ${parameter}`,\n    minLength: (value, parameter) => `长度必须大于等于 ${parameter} (两个英文等于1)`,\n    maxLength: (value, parameter) => `长度必须大于等于 ${parameter} (两个英文等于1)`,\n    noSymbol: (value, parameter) => `必须是中文或英文,数字`,\n    telephone: (value, parameter) => `必须是手机号码`,\n};\n/**\n * 正则集合\n */\nexports.regExpArray = {\n    get required() { return /[^\\s]/g; },\n    get number() { return /^[0-9]\\d*$/g; },\n    get noSymbol() { return /^[\\u4E00-\\u9FA50-9a-zA-Z]+$/g; },\n    get telephone() { return /^1[34578]\\d{9}$/g; }\n};\n;\nexports.ruleArray = {\n    min: (value, parameter) => parseInt(value) >= parameter,\n    max: (value, parameter) => parseInt(value) <= parameter,\n    minLength: (value, parameter) => getLength(value) >= parameter,\n    maxLength: (value, parameter) => getLength(value) <= parameter,\n};\n/**\n * 替换规则集合\n */\nexports.replaceArray = {\n    number: (value) => {\n        return value.replace(/[^0-9]/g, \"\").replace(/^0+/g, \"\");\n    },\n    min: (value) => {\n        return value.replace(/[^0-9]/g, \"\").replace(/^0+/g, \"\");\n    },\n    max: (value) => {\n        return value.replace(/[^0-9]/g, \"\").replace(/^0+/g, \"\");\n    }\n};\n/**\n * 添加验证规则\n *\n * @param {RuleObj} ruleObj\n */\nfunction addRule(ruleObj) {\n    exports.messages[ruleObj.key] = ruleObj.messages;\n    ruleObj.regExp && (exports.regExpArray[ruleObj.key] = ruleObj.rule);\n    ruleObj.rule && (exports.ruleArray[ruleObj.key] = ruleObj.rule);\n    ruleObj.replace && (exports.replaceArray[ruleObj.key] = ruleObj.replace);\n}\nexports.addRule = addRule;\n/**\n * 默认验证规则 去除前后空格\n *\n * @param {string} key\n * @returns {RuleFunction}\n */\nfunction replaceDefault(value) {\n    return value.replace(/(^\\s*)|(\\s*$)/g, \"\");\n}\nexports.replaceDefault = replaceDefault;\n/**\n * 默认验证规则\n *\n * @param {string} key\n * @returns {RuleFunction}\n */\nfunction ruleDefault(key) {\n    return (value) => {\n        return exports.regExpArray[key].test(value);\n    };\n}\nexports.ruleDefault = ruleDefault;\n/**\n * 获取字符串长度 中文 = 1 英文 = 0.5\n *\n * @export\n * @param {string} value\n * @returns {number}\n */\nfunction getLength(value) {\n    return value.replace(/[^\\x00-\\xff]/g, \"01\").length / 2;\n}\nexports.getLength = getLength;",null],"sourceRoot":"/assets"}